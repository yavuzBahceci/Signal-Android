project.afterEvaluate { project ->
    setupAndroidReporting(project)
}

def setupAndroidReporting(project) {
    tasks.withType(Test) {
        // Whether or not classes without source location should be instrumented
        jacoco.includeNoLocationClasses = true
        jacoco.excludes = ['jdk.internal.*']
    }

    // Grab all build types and product flavors
    def buildTypes = android.buildTypes.collect { type ->
        type.name
    }
    def productFlavors = android.productFlavors.collect { flavor ->
        flavor.name
    }
    // When no product flavors defined, use empty
    if (!productFlavors) productFlavors.add('')
    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->
            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }
            def testTaskName = "test${sourceName.capitalize()}UnitTest"
            System.out.println("Task -> $testTaskName")

            // Skip 'app' module
            if (sourceName == "appDebug") {
                return
            }

            // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
            task "${testTaskName}Coverage"(type: JacocoReport, dependsOn: "$testTaskName") {
                group = "Reporting"
                description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

                def fileFilter = [
                        // data binding
                        'android/databinding/**/*.class',
                        '**/android/databinding/*Binding.class',
                        '**/android/databinding/*',
                        '**/androidx/databinding/*',
                        '**/BR.*',
                        // android
                        '**/R.class',
                        '**/R$*.class',
                        '**/BuildConfig.*',
                        '**/Manifest*.*',
                        '**/*Test*.*',
                        'android/**/*.*',
                        // kotlin
                        '**/*MapperImpl*.*',
                        '**/*$ViewInjector*.*',
                        '**/*$ViewBinder*.*',
                        '**/BuildConfig.*',
                        '**/*Component*.*',
                        '**/*BR*.*',
                        '**/Manifest*.*',
                        '**/*$Lambda$*.*',
                        '**/*Companion*.*',
                        '**/*Module*.*',
                        '**/*Dagger*.*',
                        '**/*Hilt*.*',
                        '**/*MembersInjector*.*',
                        '**/*_MembersInjector.class',
                        '**/*_Factory*.*',
                        '**/*_Provide*Factory*.*',
                        '**/*Extensions*.*',
                        // sealed and data classes
                        '**/*$Result.*',
                        '**/*$Result$*.*',
                        // adapters generated by moshi
                        '**/*JsonAdapter.*',
                        // Exclusion for lines with only parentheses
                        '**/*)',
                        '**/*('
                ]

                def javaTree = fileTree(dir: "${project.buildDir}/intermediates/javac/$sourceName/classes", excludes: fileFilter)
                def kotlinTree = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/$sourceName", excludes: fileFilter)
                classDirectories.setFrom(javaTree, kotlinTree)
                executionData.from = files("${project.buildDir}/jacoco/${testTaskName}.exec")
                def coverageSourceDirs = ["src/main/java",
                                          "src/$productFlavorName/java",
                                          "src/$buildTypeName/java"]

                sourceDirectories.setFrom(coverageSourceDirs)
                additionalSourceDirs.setFrom(coverageSourceDirs)

                reports {
                    xml.enabled = true
                    xml.destination = file("${project.buildDir}/reports/jacoco/${sourcePath}/jacoco.xml")
                    html.enabled = true
                }
            }
        }
    }

    // Generate the aggregated coverage report
    task generateCoverageReport(type: JacocoReport) {
        def moduleReports = subprojects.collect { pj ->
            fileTree("${pj.projectDir}/build/reports/coverage/androidTest/debug/connected")
                    .include("**/report.xml")
        }

        executionData fileTree("${project.rootProject.buildDir}/jacoco").include('**/*.exec')
        classDirectories.from = moduleReports
        sourceDirectories.from = subprojects.collect { pj ->
            files("${pj.projectDir}/src/main/java")
        }
        additionalSourceDirs.from = subprojects.collect { pj ->
            files("${pj.projectDir}/src/main/java")
        }

        reports {
            xml.enabled = true
            html.enabled = true
            xml.destination = file("${project.rootProject.buildDir}/reports/jacoco/jacoco.xml")
        }
    }
}

android {
    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            testCoverageEnabled true
        }
    }
}
